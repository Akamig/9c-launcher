version: 2.1

orbs:
  win: circleci/windows@4.1.1

executors:
  windows: &windows
    machine:
      image: windows-server-2022-gui:current
    resource_class: windows.large
  linux: &linux
    machine:
      image: ubuntu-2204:2022.04.1
  macos: &macos
    macos:
      xcode: 14.0.0

commands:
  checkout-update-submodules:
    parameters:
      paths:
        type: string
        default: ""
    steps:
      - checkout
      - run: 
          command: git submodule update --init --recursive <<parameters.paths>>
          environment:
            GIT_LFS_SKIP_SMUDGE: 1
  build-headless:
    steps:
      - run: git -C NineChronicles.Headless log --pretty="%T" -n 1 > tree-hash
      - restore_cache:
          keys:
            - headless-build-{{ arch }}-{{ checksum "tree-hash" }}
      - run: yarn build-headless
      - save_cache:
          key: headless-build-{{ arch }}-{{ checksum "tree-hash" }}
          paths:
            - dist/publish
  yarn-install:
    steps:
      - restore_cache:
          keys:
            - yarn3-installation-{{ arch }}-{{ checksum "yarn.lock" }}
      - run: 
          command: |
            corepack enable
            yarn install --immutable
      - save_cache:
          key: yarn3-installation-{{ arch }}-{{ checksum "yarn.lock" }}
          paths:
            - .yarn/cache
  install-dotnet:
    parameters:
      version:
        type: string
        default: "6.0.100"
    steps:
      - run:
          command: |
            choco install dotnet-sdk --version <<parameters.version>> -y --no-progress
          name: Install .NET Core Latest

jobs:
  build:
    parameters:
      os:
        type: executor
    executor: << parameters.os >>
    steps:
      - when:
          condition: 
            equal: [ *windows, << parameters.os >>]
          steps:
            - run:
                command: |
                  git config --global core.symlinks true # https://github.com/git-for-windows/git/wiki/Symbolic-Links 
                  nvm install lts
                  rm "/c/Program Files/nodejs" -rf
                  nvm use 16.16.0
      - checkout-update-submodules:
          paths: "NineChronicles.Headless"
      - yarn-install
      - when:
          condition:
            equal: [ *macos, << parameters.os >>]
          steps:
            - run: 
                command: |
                  brew install --cask dotnet-sdk
                  curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
                  sudo installer -pkg AWSCLIV2.pkg -target /
                name: Install .NET Core, AWS
      - when:
          condition:
            equal: [ *linux, << parameters.os >>]
          steps:
            - run: 
                command: |
                  wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
                  sudo dpkg -i packages-microsoft-prod.deb
                  rm packages-microsoft-prod.deb
                  sudo apt update
                  sudo apt install -y dotnet-sdk-6.0
                name: Install .NET Core
      - run:
          command: |
            dotnet clean -c Release
            dotnet nuget locals all --clear
          working_directory: NineChronicles.Headless
          name: Clean Headless
      - build-headless
      - run: 
          command: 'echo "::set-output name=apv::$(scripts/make-apv.sh)"'
          name: Make APV
      - run: 
          command: |
            mkdir pack-dist
            set -ex
            mkdir -p dist
            curl -o "dist/config.json" 'https://download.nine-chronicles.com/9c-launcher-config.json'
          name: Copy config.json from the last release
      - run: 
          command: yarn sign-apv
          name: Sign APV
      - run: 
          command: |
            if [[ "$CIRCLE_BRANCH" == "main" ]]
            then
              yarn release
            else
              yarn run pack
            fi
      - when:
          condition: 
            equal: [ *windows, << parameters.os >>]
          steps:
          - run: 
              command: 7z a -r ../../pack-dist/Windows.zip *
              working_directory: pack/Nine Chronicles-win32-x64/
      - when:
          condition:
            equal: [ *macos, << parameters.os >>]
          steps:
            - run:
                command: |
                  chmod +x "Nine Chronicles.app/Contents/Resources/app/9c.app/Contents/MacOS/9c"
                  tar cvfz ../../pack-dist/macOS.tar.gz *
                working_directory: pack/Nine Chronicles-darwin-x64/
      - when:
          condition:
            equal: [ *linux, << parameters.os >>]
          steps:
            - run: 
                command: |
                  chmod +x resources/app/9c
                  tar cvfz ../../pack-dist/Linux.tar.gz *
                working_directory: pack/Nine Chronicles-linux-x64/
      - store_artifacts:
          path: pack-dist
          destination: dist-artifacts
      - run: 
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY
            aws configure set aws_secret_access_key $AWS_SECRET_KEY
          name: Set S3
      - when:
          condition: 
            equal: [ *windows, << parameters.os >>]
          steps:
            - run: 
                command: aws s3 cp pack-dist/Windows.zip s3://9c-artifacts/9c-launcher/$CIRCLE_SHA1/Windows.zip
      - when:
          condition:
            equal: [ *macos, << parameters.os >>]
          steps:
            - run: 
                command: aws s3 cp pack-dist/macOS.tar.gz s3://9c-artifacts/9c-launcher/$CIRCLE_SHA1/macOS.tar.gz
      - when:
          condition:
            equal: [ *linux, << parameters.os >>]
          steps:
            - run: 
                command: aws s3 cp pack-dist/Linux.tar.gz s3://9c-artifacts/9c-launcher/$CIRCLE_SHA1/Linux.tar.gz
  styles:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - yarn-install
      - run:
          command: yarn prettier --check "src/**/*.{ts,tsx,json}"
          name: Check Formatting
      - run: yarn codegen
      - run:
          command: yarn tsc --noEmit
          name: Type Check
  chromatic:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - yarn-install
      - run: yarn codegen
      - run: yarn chromatic --project-token=${CHROMATIC_PROJECT_TOKEN} --exit-zero-on-changes
  update-translations:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - yarn-install
      - run:
          command: yarn update-translations
          name: Update Translations
  e2e-test:
    executor:
      name: win/default
      size: medium
    steps:
      - run: git config --global core.symlinks true # https://github.com/git-for-windows/git/wiki/Symbolic-Links 
      - checkout-update-submodules:
          paths: "NineChronicles.Headless"
      - yarn-install
      - run: scripts/create-key.ps1
      - install-dotnet
      - run: yarn build-headless
      - run: yarn build-prod
      - run: scripts/copy-config.ps1
      - run: yarn test
      - store_artifacts:
          path: __tests__/snapshots
          destination: e2e-snapshots
      - store_artifacts:
          path: __tests__/logs
          destination: e2e-logs


workflows:
  build:
    jobs:
      - build:
          matrix:
            parameters:
              os: ["linux", "macos", "windows"]
      - styles
      - update-translations:
          filters:
            branches:
              only: development
      - e2e-test
      - chromatic
