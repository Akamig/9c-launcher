mutation createPrivateKey($privateKey: ByteString, $passphrase: String!) {
  keyStore {
    createPrivateKey(privateKey: $privateKey, passphrase: $passphrase) {
      hex
      publicKey {
        address
      }
    }
  }
}

mutation revokePrivateKey($address: Address!) {
  keyStore {
    revokePrivateKey(address: $address) {
      address
    }
  }
}

query NodeStatus {
  nodeStatus {
    bootstrapEnded
    preloadEnded
  }
}

query TopmostBlocks($limit: Int = 500, $miner: Address = null) {
  nodeStatus {
    topmostBlocks(limit: $limit, miner: $miner) {
      id
      hash
      index
      miner
    }
  }
}

subscription PreloadProgressSubscription {
  preloadProgress {
    currentPhase
    totalPhase
    extra {
      type
      currentCount
      totalCount
    }
  }
}

subscription NodeStatusSubscription {
  nodeStatus {
    bootstrapEnded
    preloadEnded
  }
}

subscription NodeException {
  nodeException {
    code
    message
  }
}

query DecryptedPrivateKey($address: Address!, $passphrase: String!) {
  keyStore {
    decryptedPrivateKey(address: $address, passphrase: $passphrase)
  }
}

query ProtectedPrivateKeys {
  keyStore {
    protectedPrivateKeys {
      address
    }
  }
}

query ConvertPrivateKeyToAddress($privateKey: ByteString!) {
  keyStore {
    privateKey(hex: $privateKey) {
      publicKey {
        address
      }
    }
  }
}

query ValidatePrivateKey($privateKey: ByteString!) {
  validation {
    privateKey(hex: $privateKey)
  }
}

subscription DifferentAppProtocolVersionEncounter {
  differentAppProtocolVersionEncounter {
    peer
    peerVersion {
      version
      extra
    }
    localVersion {
      version
      extra
    }
  }
}

query Activation {
  activationStatus {
    activated
  }
}

mutation Activate($encodedActivationKey: String!) {
  activationStatus {
    activateAccount(encodedActivationKey: $encodedActivationKey)
  }
}

subscription Notification {
  notification {
    type
    message
  }
}

query ValidateSnapshot($raw: String!) {
  validation {
    metadata(raw: $raw)
  }
}

query CollectionSheet {
  stateQuery {
    monsterCollectionSheet {
      orderedList {
        level
        requiredGold
        rewards {
          itemId
          quantity
        }
      }
    }
  }
}

query GetAvatarAddress($address: Address!) {
  stateQuery {
    agent(address: $address) {
      avatarStates {
        address
        name
        updatedAt
      }
    }
  }
}

query CollectionSheetWithState($address: Address!) {
  stateQuery {
    monsterCollectionSheet {
      orderedList {
        level
        requiredGold
        rewards {
          itemId
          quantity
        }
      }
    }
    agent(address: $address) {
      gold
      monsterCollectionLevel
      monsterCollectionRound
    }
  }
}

query GoldAndCollectionLevel($address: Address!) {
  stateQuery {
    agent(address: $address) {
      gold
      monsterCollectionLevel
    }
  }
}

query MinerAddress {
  minerAddress
}

query GetTip {
  nodeStatus {
    tip {
      index
    }
  }
}

query StateQueryMonsterCollection($agentAddress: Address!) {
  stateQuery{
  monsterCollectionState(agentAddress: $agentAddress) {
    end
    expiredBlockIndex
    level
    rewardLevel
    receivedBlockIndex
    startedBlockIndex
    claimableBlockIndex
  }
  }
}

mutation Collect($level: Int!) {
  action {
    monsterCollect(level: $level)
  }
}

mutation CancelCollection($level: Int!) {
  action {
    cancelMonsterCollect(level: $level)
  }
}

mutation ClaimCollectionReward($address: Address!) {
  action {
    claimMonsterCollectionReward(avatarAddress: $address)
  }
}

subscription CollectionState {
  monsterCollectionState {
    address
    end
    expiredBlockIndex
    level
    rewardLevel
    receivedBlockIndex
    startedBlockIndex
    claimableBlockIndex
  }
}

query StagedTx($address: Address!) {
  nodeStatus {
    stagedTxIds(address: $address)
  }
}

subscription CurrentGold {
  monsterCollectionStatus {
    fungibleAssetValue {
      quantity
    }
  }
}

subscription CanReceiveCollection {
  monsterCollectionStatus {
    canReceive
  }
}

subscription CollectionStatus {
  monsterCollectionStatus {
    canReceive
    fungibleAssetValue {
      quantity
    }
    rewardInfos {
      itemId
      quantity
    }
  }
}

query CollectionStatusQuery {
  monsterCollectionStatus {
    canReceive
    fungibleAssetValue {
      quantity
    }
    rewardInfos {
      itemId
      quantity
    }
  }
}
